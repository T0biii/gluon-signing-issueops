name: "Sign Firmware Manifest"

on:
  issues:
    types: [labeled]

jobs:
  sign-manifest:
    if: |
      github.event.issue.state == 'open' &&
      github.event.label.name == 'Sign'
    runs-on: ubuntu-latest
    env:
      ECDSAUTILS_VERSION: v0.4.2

    steps:
      - name: Check required repo variables
        id: check-vars
        uses: actions/github-script@v7
        with:
          script: |
            const requiredVars = ['FIRMWARE_BASE_URL', 'FIRMWARE_SIGNING_KEY'];
            let missing = [];
            for (const v of requiredVars) {
              if (!process.env[v]) missing.push(v);
            }

            // React with thumbs down to alert of the problem.
            if (missing.length > 0) {
              github.rest.reactions.createForIssueComment({
                comment_id: context.payload.comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                content: '-1'
              });
              core.setFailed('Missing required repository variables: ' + missing.join(', '));
            }
        env:
          FIRMWARE_BASE_URL: ${{ vars.FIRMWARE_BASE_URL }}
          FIRMWARE_SIGNING_KEY: ${{ secrets.FIRMWARE_SIGNING_KEY }}

      - name: Check out repository
        uses: actions/checkout@v4
      - name: React with thumbs up
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.reactions.createForIssueComment({
              comment_id: context.payload.comment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: '+1'
            })
      - name: Parse issue form
        id: form
        uses: issue-ops/parser@v4
        with:
          issue-form-template: firmware-signing.yml
          body: ${{ github.event.issue.body }}
      - name: Validate issue data
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            const issue_data = ${{ steps.form.outputs.json }}; // Valid JSON -> Valid JavaScript object
            if (!issue_data.version || !issue_data.channel || issue_data.channel.length === 0) {
              core.setFailed('Version or channel not found');
              return;
            }
            const version = issue_data.version;
            const channel = issue_data.channel[0];
            if (!/^[a-zA-Z0-9._-]+$/.test(version)) {
              core.setFailed('Invalid version format: ' + version);
              return;
            }
            if (!["stable", "testing", "experimental"].includes(channel)) {
              core.setFailed('Invalid channel: ' + channel);
              return;
            }
            core.setOutput('version', version);
            core.setOutput('channel', channel);
      - name: Download manifest
        run: |
          curl -fsSL "$FIRMWARE_BASE_URL/${{ steps.validate.outputs.version }}/sysupgrade/${{ steps.validate.outputs.channel }}.manifest" -o manifest
        env:
          FIRMWARE_BASE_URL: ${{ vars.FIRMWARE_BASE_URL }}
      - name: Install ecdsautils
        run: |
          sudo apt-get update && sudo apt-get install -y build-essential cmake libuecc-dev
          curl -fsSL -o ecdsautils.tar.gz https://github.com/freifunk-gluon/ecdsautils/archive/refs/tags/${ECDSAUTILS_VERSION}.tar.gz
          tar -xzf ecdsautils.tar.gz
          cd ecdsautils-${ECDSAUTILS_VERSION#v} && mkdir build && cd build && cmake -DCMAKE_POLICY_VERSION_MINIMUM=3.5 .. && make && sudo make install
      - name: Sign manifest and extract signature
        id: sign
        run: |
          # Pass name of env var containing the private key
          signature=$(./sign.sh PRIVATE_KEY manifest)
          echo "signature=$signature" >> $GITHUB_OUTPUT
          cat manifest
        env:
          PRIVATE_KEY: ${{ secrets.FIRMWARE_SIGNING_KEY }}
          LD_LIBRARY_PATH: /usr/local/lib
      - name: Post signature as comment
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.validate.outputs.version }}';
            const channel = '${{ steps.validate.outputs.channel }}';
            const baseUrl = process.env.FIRMWARE_BASE_URL;
            const manifestUrl = `${baseUrl}/${version}/sysupgrade/${channel}.manifest`;

            const signature = '${{ steps.sign.outputs.signature }}';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Signature for ${version} [${channel}.manifest](${manifestUrl}):

            \`\`\`
            ${signature}
            \`\`\``
            })
        env:
          FIRMWARE_BASE_URL: ${{ vars.FIRMWARE_BASE_URL }}
      - name: Close issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.update({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed'
            })
